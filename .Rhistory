x<-read.csv('/Users/awalser/Downloads/hw1_data.csv')
x
x[1,]
names(x)
x[1:2]
x[1,]
x[1:2,]
dim(x)
length
length(x)
x[152:153,]
x[47,]
x[1]
is.na(x[1])
sum(x[1]==na)
sum(x[1]==NA)
sum(is.na(x[1])
4
sum(is.na(x[1]))
sum(!is.na(x[1]))
mean(!is.na(x[1]))
names(x)
x[1]
!is.na(x[1])
mean(na.omit(x[1])
)
na.omit(x[1])
y<-na.omit(x[1])
mean[y]
mean[y[2:153]]
mean[y[2:153])
mean(y)
mean(y[1])
y[1]
mean(y[1])
x[1]
omit.na(x[1])
na.omit(x[1])
mean(na.omit(x[1]))
mean(is.numeric(na.omit(x[1])))
is.numeric(na.omit(x[1]))
as.numeric(na.omit(x[1]))
as.integer(na.omit(x[1]))
integer(na.omit(x[1]))
na.omit(x[1])
data<-na.omit(x[1])
class(data)
data<-as.vector(na.omit(x[1]))
data
class(data)
x
class(x)
mean(x[1])
x[1]
mean(x$Ozone)
colMeans(x[1])
apply(x,1,mean)
apply(x,1,mean)
omit.na(x$Ozone)
na.omit(x$Ozone)
na.omit(x[1])
as.vector(na.omit(x[1]))
as.numeric(na.omit(x[1]))
class(x)
class(cbin(x)
)
class(cbin(x))
class(cbind(x))
class(cbind(x,1))
cbind(x)
x.Ozone
x$Ozone
na.omit(x$Ozone)
na.omitt(x$Ozone)
mean(x$Ozone)
na.omit(x$Ozone)
mean(na.omit(x$Ozone))
x$Ozone[x$Ozone>31]
x$Ozone[x$Ozone>31,x$Ozone<100]
x$Ozone[x$Ozone>31&&x$Ozone<100]
x$Ozone[x$Ozone>31]
subset<-x$Ozone>31
subset
subset2<-x$Temp>90
subset+subset2
sum<-subset+subset2
sum
x$Ozone
x$Ozone[sum]
x$Ozone[subset]
x
x
subset(x, Ozone>30)
subset(x, Ozone>31 & Temp>90)
x.sub <- subset(x, Ozone>31 & Temp>90)
x.sub$Ozone
mean(x.sub$Ozone)
mean(x.sub$Solar)
mean(x.sub$Solar.R)
x.sub <- subset(x, Month=6)
x.sub
mean(x.sub$Temp)
x
subset(x,Month=6)
subset(x,Month==6)
x.sub<-subset(x,Month==6)
x.sub$Temp
mean(x.sub$Temp)
x.sub<-subset(x,Month==5)
max(x.sub$Ozone)
max(omit.na(x.sub$Ozone)
)
max(omit.na(x.sub$Ozone))
max(na.omit(x.sub$Ozone))
a <- c(4, "a", TRUE)
class(a)
a <- list(2, "a", "b", TRUE)
a[1]
a[[1]
]
a[[1]]
b<-a[[1]]
class(b)
b
b<-a[1]
class(b)
a<-1:4
b<-2:3
a+b
a<- c(3, 5, 1, 10, 12, 6)
a[a<6]<-0
a
names[x]
names(x)
x[1:2]
x[,1:2]
x[,1]
x[,1:2]
class(x)
x[1,]
x[1:2,]
length(x)
length(x[1])
length(x[[1])
length(x[[1]])
x[-(1:2),]
head(x,2)
tail(x,2)
x[[47]]
x[47]
x[47:]
x
x[1,]
x[47,]
x$Ozone
sumx$Ozone
sumx(is.na($Ozone))
sum(is.na(x$Ozone))
mean(omit.na(x$Ozone))
mean(na.omit(x$Ozone))
x.sub<-subset(x,Ozone>31&Temp>90)
x.sub
mean(x.sub)
mean(x.sub$Solar.R)
x.sub<-subset(x,Month=6)
mean(x.sub$Temp)
x.sub<-subset(x,Month==6)
mean(x.sub$Temp)
x.sub<-subset(x,Month==5)
max(x.sub$Ozone)
max(omit.na(x.sub$Ozone))
max(na.omit(x.sub$Ozone))
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-4
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
install.package(httr)
install.packages(httr)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "b27d6a5e666d9e7f14f9",
secret = "eb1595048966e7152857580f394a1c30f6d610b9")
github_token <- oauth2.0_token(oauth_endpoints("github"), coursera0202)
github_token <- oauth2.0_token(oauth_endpoints("github"), coursera0202)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
?download.file
download.file(url,quizdata.csv)
download.file(url,"quizdata.csv")
data <- read.csv("quizdata.csv")
names(data)
strsplit(names(data))
?strsplit
strsplit(names(data),"wgtp")
strsplit(names(data),"wgtp")[[123]]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(url,"quizdata.csv")
data <- read.csv("quizdata.csv")
?index
setwd("/Users/tgdwaana/sync/git/RepData_PeerAssessment1_github")
setwd("/Users/awalser/sync/git/RepData_PeerAssessment1_github")
setwd("/Users/awalser/sync/git/RepData_PeerAssessment1")
fileName <- "activity.zip"
fileNameCSV <- gsub("zip", "csv", fileName)
unzip(fileName, fileNameCSV)
data <- read.csv(fileNameCSV, header=TRUE, sep=",", na.strings="NA")
summary(data)
totalSteps <- tapply(data$steps, data$date, FUN=sum)
```
Plot histogram of the total number of steps taken each day
hist(totalSteps, xlab="total steps per day", ylab="frequency", main="histogram of total steps per day")
mean(totalSteps, na.rm=TRUE)
median(totalSteps, na.rm=TRUE)
totalSteps <- tapply(data$steps, data$date, FUN=sum)
mean(totalSteps, na.rm=TRUE)
median(totalSteps, na.rm=TRUE)
meanSteps <- tapply(data$steps, data$interval, FUN=mean, na.rm = TRUE)
plot(meanSteps, type="l",
xlab="5-min time intervals",
ylab="mean # of steps taken",
main="average steps taken at 5-min time intervals"
)
positionOfMax <- which.max(meanSteps)
names(positionOfMax)
unname(positionOfMax)*5
names(positionOfMax)
```
sum(is.na(data$steps))
df <- read.csv("activity.csv")
df$date <- as.Date(df$date)
library(ggplot2)
total.steps.by.day <- aggregate(x = df$steps , by = list(df$date), FUN = sum ,na.rm=TRUE)
names(total.steps.by.day) <- c("date","steps")
histplot <- ggplot(total.steps.by.day,aes(x = steps)) +
ggtitle("Histogram of daily steps") +
xlab("Steps (binwidth 2000)") +
geom_histogram(binwidth = 2000)
histplot
mean(total.steps.by.day$steps , na.rm = TRUE)
totalSetps
totalSteps
hist(totalSteps, xlab="total steps per day", ylab="frequency", main="histogram of total steps per day")
medianSteps <- tapply(data$steps, data$date, FUN=median)
medianSteps
medianSteps <- tapply(data$steps, data$date, FUN=median, na.rm = TRUE)
medianSteps
mean(totalSteps, na.rm=TRUE)
median(totalSteps, na.rm=TRUE)
totalSteps <- tapply(data$steps, data$date, FUN=sum, na.rm =TRUE)
mean(totalSteps, na.rm=TRUE)
median(totalSteps, na.rm=TRUE)
hist(totalSteps, xlab="total steps per day", ylab="frequency", main="histogram of total steps per day")
dim(data)
sum(is.na(data))
sum(is.na(data$steps))
is.na(data$steps)
ncol(data)
ncol(data$steps)
nrow(data$steps)
data$steps
length(data$steps)
for(i in 1:length(data$steps)){
if(is.na(data$steps)){
data[i]
}
}
for(i in 1:length(data$steps)){
if(is.na(data$steps[i])){
data[i]
}
}
data[1]
dim(data)
data[,1]
dim(data)
data[1,]
data[1,1]
for(i in 1:length(data$steps)){
if(is.na(data[i,1])){
data[i,]
}
}
```
data[100,1]
data[1040,1]
data[1040,]
for(i in 1:length(data$steps)){
if(is.na(data[i,1])){
data[i,]
}
}
```
length(data$steps)
for(i in 1:length(data$steps)){
is.na(data[i,1])
}
```
for(i in 1:100){
is.na(data[i,1])
}
```
for(i in 1:100){
is.na(data[i,1])
}
```
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
for(i in 1:100){
is.na(data[i,1])
}
is.na(data[1,1])
for(i in 1:100){
print(is.na(data[i,1]))
}
for(i in 1:length(data$steps)){
if(is.na(data[i,1])){
print(data[i,])
}
}
meanSteps
for(i in 1:length(data$steps)){
if(is.na(data[i,1])){
print(data[i,3])
}
}
which(meanSteps,2310)
which(meanSteps)
which(2355, meanSteps)
which(2355 %in% meanSteps)
meanSteps["2355",]
meanSteps[,"2355"]
meanSteps
meanSteps[,2355]
meanSteps[2355],
meanSteps[2355,]
meanSteps[1,]
meanSteps[1]
which(2355 == meanSteps)
which(meanSteps ==0.1132075)
which(meanSteps == 0.1132075)
meanSteps[1]
names(meanSteps[1])
meanSteps["0"]
for(i in 1:length(data$steps)){
if(is.na(data[i,1])){
print(data[i,3])
}
}
meanSteps[2355]
meanSteps["2355""]
}
meanSteps["2355"]
unname(meanSteps["2355"])
unname(meanSteps[toString(2355)])
for(i in 1:length(data$steps)){
if(is.na(data[i,1])){
print(data[i,3])
unname(meanSteps[toString(data[i,3])])
}
}
for(i in 1:length(data$steps)){
if(is.na(data[i,1])){
print(data[i,3])
print(unname(meanSteps[toString(data[i,3])]))
}
}
for(i in 1:length(data$steps)){
if(is.na(data[i,1])){
data[i,1] <- unname(meanSteps[toString(data[i,3])])
}
}
head(data,100)
hist(totalSteps, xlab="total steps per day", ylab="frequency", main="histogram of total steps per day")
totalSteps <- tapply(data$steps, data$date, FUN=sum, na.rm =TRUE)
hist(totalSteps, xlab="total steps per day", ylab="frequency", main="histogram of total steps per day")
mean(totalSteps, na.rm=TRUE)
median(totalSteps, na.rm=TRUE)
weekdays()
data$date[1]
data$date[1,]
data$date
data$date[1]
weekdays(data$date[1])
as.Date(data$date[1])
weekdays(as.Date(data$date[1]))
weekdays(as.Date(data$date[6]))
weekdays(as.Date(data$date[9]))
weekdays(as.Date(data$date[900]))
length(data[,1])
for(i in 1:100){
weekdays(as.Date(data$date[i]))
}
```
for(i in 1:100){
print(weekdays(as.Date(data$date[i])))
}
for(i in length(data[,1])){
name = weekdays(as.Date(data$date[i]))
if (name == "Saturday" | "Sunday"){
print("weekend")
} else {
print("weekday")
}
}
for(i in length(data[,1])){
name = weekdays(as.Date(data$date[i]))
if (name = "Saturday" | "Sunday"){
print("weekend")
for(i in length(data[,1])){
name = weekdays(as.Date(data$date[i]))
if (name == "Saturday" | name == "Sunday"){
print("weekend")
} else {
print("weekday")
}
}
for(i in length(data[,1])){
name = weekdays(as.Date(data$date[i]))
if (name == "Saturday" | name == "Sunday"){
print("weekend")
} else {
print("weekday")
}
}
for(i in length(data[,1])){
print(i)
name = weekdays(as.Date(data$date[i]))
if (name == "Saturday" | name == "Sunday"){
print("weekend")
} else {
print("weekday")
}
}
length(data[,1])
i
for(i in 1:length(data[,1])){
print(i)
name = weekdays(as.Date(data$date[i]))
if (name == "Saturday" | name == "Sunday"){
print("weekend")
} else {
print("weekday")
}
}
date
data
data$steps[2]
for(i in 1:length(data[,1])){
name = weekdays(as.Date(data$date[i]))
if (name == "Saturday" | name == "Sunday"){
data$category[i] <- "weekend"
} else {
data$category[i] <- "weekday"
}
}
head(data)
data$category <- as.factor(data$category)
tmpdata <- ddply(data, .(interval,category), summarize, steps = mean(steps, na.rm=TRUE))
library(ggplot2)
library(ddply)
library(plyr)
tmpdata <- ddply(data, .(interval,category), summarize, steps = mean(steps, na.rm=TRUE))
ggplot(data=tmpdata, aes(x=interval, y=steps, group=category)) + geom_line(aes(color=week))+ facet_wrap(~ week, nrow=2)
ggplot(data=tmpdata, aes(x=interval, y=steps, group=category)) + geom_line(aes(color=week))+ facet_wrap(~ category, nrow=2)
ggplot(data=tmpdata, aes(x=interval, y=steps, group=category)) + geom_line(aes(color=category))+ facet_wrap(~ category, nrow=2)
ggplot(data=tmpdata, aes(x=interval, y=steps, group=category)) + facet_wrap(~ category, nrow=2)
ggplot(data=tmpdata, aes(x=interval, y=steps, group=category)) + geom_line()+ facet_wrap(~ category, nrow=2)
plot([1,2,3,4,5])
plot(c[1,2,3,4,5])
plot(c(1,2,3,4,5))
setwd("/Users/awalser/sync/git/RepData_PeerAssessment1")
knit2html()
connect()
library("elastic")
install.packages("elastic")
connect()
library("elastic")
connect(es_base = http://192.168.99.100, es_port = 32778)
connect(es_base = 192.168.99.100, es_port = 32778)
connect(es_base = "http://192.168.99.100", es_port = 32778)
